"use client";

import React, { useState } from "react";
import Link from "next/link";
import dynamic from "next/dynamic"; 
import confetti from "canvas-confetti";

const Particles = dynamic(() => import("react-tsparticles").then((mod) => mod.default), {
  ssr: false,
});

type Question = {
  pattern: string;
  options: string[];
  correctIndex: number;
};

const questions: Question[] = [
  {
    pattern: "Kh√°i ni·ªám 't·ªìn t·∫°i x√£ h·ªôi' trong tri·∫øt h·ªçc M√°c ‚Äì L√™nin l√† g√¨?",
    options: [
      "ƒê·ªùi s·ªëng tinh th·∫ßn c·ªßa con ng∆∞·ªùi nh∆∞ ƒë·∫°o ƒë·ª©c, ph√°p lu·∫≠t, t√¥n gi√°o",
      "To√†n b·ªô nh·ªØng ƒëi·ªÅu ki·ªán v·∫≠t ch·∫•t c·ªßa ƒë·ªùi s·ªëng con ng∆∞·ªùi",
      "Nh·ªØng gi√° tr·ªã vƒÉn h√≥a v√† phong t·ª•c t·∫≠p qu√°n",
      "Ch·ªâ bao g·ªìm n·ªÅn kinh t·∫ø v√† s·∫£n xu·∫•t",
    ],
    correctIndex: 1,
  },
  {
    pattern: "√ù th·ª©c x√£ h·ªôi ƒë∆∞·ª£c hi·ªÉu nh∆∞ th·∫ø n√†o?",
    options: [
      "To√†n b·ªô ƒëi·ªÅu ki·ªán t·ª± nhi√™n c·ªßa con ng∆∞·ªùi",
      "Ch·ªâ bao g·ªìm ph√°p lu·∫≠t v√† ch√≠nh tr·ªã",
      "To√†n b·ªô ƒë·ªùi s·ªëng tinh th·∫ßn c·ªßa x√£ h·ªôi",
      "H·ªá th·ªëng s·∫£n xu·∫•t v√† quan h·ªá kinh t·∫ø",
    ],
    correctIndex: 2,
  },
  {
    pattern: "Theo M√°c ‚Äì L√™nin, m·ªëi quan h·ªá gi·ªØa t·ªìn t·∫°i x√£ h·ªôi v√† √Ω th·ª©c x√£ h·ªôi ra sao?",
    options: [
      "√ù th·ª©c x√£ h·ªôi quy·∫øt ƒë·ªãnh t·ªìn t·∫°i x√£ h·ªôi",
      "T·ªìn t·∫°i x√£ h·ªôi quy·∫øt ƒë·ªãnh √Ω th·ª©c x√£ h·ªôi",
      "Kh√¥ng c√≥ m·ªëi quan h·ªá n√†o",
      "Hai kh√°i ni·ªám ho√†n to√†n ƒë·ªôc l·∫≠p",
    ],
    correctIndex: 1,
  },
  {
    pattern: "√ù nghƒ©a c√¢u n√≥i c·ªßa C. M√°c: 'Ng∆∞·ªùi ch·∫øt ƒëang ƒë√® n·∫∑ng l√™n ng∆∞·ªùi s·ªëng' l√† g√¨?",
    options: [
      "Ng∆∞·ªùi s·ªëng ph·∫£i chƒÉm lo cho ng∆∞·ªùi ch·∫øt",
      "Nh·ªØng t∆∞ t∆∞·ªüng, t·∫≠p qu√°n qu√° kh·ª© v·∫´n ·∫£nh h∆∞·ªüng hi·ªán t·∫°i",
      "Ng∆∞·ªùi ch·∫øt v·∫´n c√≤n s·ªëng trong √Ω th·ª©c",
      "Con ng∆∞·ªùi lu√¥n b·ªã √°m ·∫£nh b·ªüi qu√° kh·ª©",
    ],
    correctIndex: 1,
  },
  {
    pattern:
      "Ph. ƒÇngghen n√≥i: 'Ch√≠nh tr·ªã, ph√°p lu·∫≠t, tri·∫øt h·ªçc... ƒë·ªÅu d·ª±a tr√™n kinh t·∫ø, nh∆∞ng c≈©ng t√°c ƒë·ªông l·∫´n nhau v√† ƒë·∫øn kinh t·∫ø'. ƒêi·ªÅu n√†y th·ªÉ hi·ªán ƒëi·ªÅu g√¨?",
    options: [
      "Kinh t·∫ø ho√†n to√†n ƒë·ªôc l·∫≠p v·ªõi ch√≠nh tr·ªã, ph√°p lu·∫≠t",
      "Kinh t·∫ø l√† c∆° s·ªü quy·∫øt ƒë·ªãnh, nh∆∞ng tinh th·∫ßn c√≥ th·ªÉ t√°c ƒë·ªông ng∆∞·ª£c",
      "√ù th·ª©c x√£ h·ªôi kh√¥ng c√≥ ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn kinh t·∫ø",
      "Ch·ªâ ch√≠nh tr·ªã m·ªõi ·∫£nh h∆∞·ªüng ƒë·∫øn kinh t·∫ø",
    ],
    correctIndex: 1,
  },
];

export default function QuizPage() {
  const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: number }>({});
  const [showAnswer, setShowAnswer] = useState<{ [key: number]: boolean }>({});

  const handleSelect = (qIndex: number, optionIndex: number) => {
    setSelectedAnswers((prev) => ({ ...prev, [qIndex]: optionIndex }));
    setShowAnswer((prev) => ({ ...prev, [qIndex]: true }));

    if (questions[qIndex].correctIndex === optionIndex) {
      confetti({
        particleCount: 120,
        spread: 80,
        origin: { y: 0.6 },
      });
    }
  };

  return (
    <main className="relative min-h-screen flex flex-col p-6">
      {/* üåå N·ªÅn Aurora + Particles */}
      <div className="absolute inset-0 -z-10 bg-gradient-to-br from-indigo-900 via-purple-800 to-pink-800 animate-gradient" />
      <Particles
        className="absolute inset-0 -z-10"
        options={{
          background: { color: "transparent" },
          particles: {
            number: { value: 50, density: { enable: true, area: 800 } },
            color: { value: "#ffffff" },
            shape: { type: "circle" },
            opacity: { value: 0.5 },
            size: { value: { min: 1, max: 4 } },
            move: { enable: true, speed: 2, direction: "none", outModes: "bounce" },
            links: { enable: true, color: "#ffffff", opacity: 0.4, distance: 150 },
          },
        }}
      />

      {/* üîô N√∫t v·ªÅ trang ch·ªß */}
      <Link
        href="/"
        className="absolute top-4 left-4 px-4 py-2 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 transition"
      >
        ‚¨Ö V·ªÅ trang ch·ªß
      </Link>

      <h1 className="text-3xl font-bold text-center mb-10 text-white drop-shadow">
        üìò Tr·∫Øc nghi·ªám √¥n t·∫≠p
      </h1>

      <div className="max-w-2xl mx-auto space-y-6">
        {questions.map((q, qIndex) => (
          <div
            key={qIndex}
            className="bg-white/90 backdrop-blur-lg shadow-xl rounded-lg p-4 transition hover:shadow-lg"
          >
            <p className="font-semibold text-gray-900 mb-3">
              {qIndex + 1}. {q.pattern}
            </p>
            <div className="space-y-2">
              {q.options.map((opt, optIndex) => {
                const isSelected = selectedAnswers[qIndex] === optIndex;
                const isCorrect = q.correctIndex === optIndex;
                const hasAnswered = showAnswer[qIndex];

                return (
                  <button
                    key={optIndex}
                    onClick={() => handleSelect(qIndex, optIndex)}
                    disabled={hasAnswered}
                    className={`w-full text-left px-4 py-2 rounded-md border transition
                      ${
                        hasAnswered
                          ? isCorrect
                            ? "bg-green-200 border-green-600 text-green-800 font-semibold"
                            : isSelected
                            ? "bg-red-200 border-red-600 text-red-800"
                            : "bg-gray-50 border-gray-200"
                          : "hover:bg-blue-50 border-gray-300"
                      }`}
                  >
                    {opt}
                  </button>
                );
              })}
            </div>

            {showAnswer[qIndex] && (
              <p className="mt-3 p-3 bg-gray-100 rounded-md text-gray-800">
                ‚úÖ ƒê√°p √°n ƒë√∫ng:{" "}
                <span className="font-semibold text-green-700">
                  {q.options[q.correctIndex]}
                </span>
              </p>
            )}
          </div>
        ))}
      </div>
    </main>
  );
}
